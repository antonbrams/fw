!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.fw=e():t.fw=e()}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}var n={};return e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,e,n){Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var n=t&&t.__esModule?function(){return t["default"]}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=13)}([function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]={computed:function(t,e){return parseInt(document.defaultView.getComputedStyle(t,null).getPropertyValue(e))},vendor:function(t){var e={};if("undefined"==typeof document)return e;var n=[null,"ms","webkit","moz","o"],r=document.createElement("div");return t.forEach(function(t){for(var i=0;i<n.length;i++){var o=n[i]+n[i]?t:t.charAt(0).toUpperCase()+t.slice(1);if("undefined"!=typeof r.style[o]){e[t]=o;break}}}),t}(["transform","transformOrigin","columnCount"])}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]={fromString:function(t){var e=document.createElement("div");return e.innerHTML=t,e.firstChild},prepend:function(t,e){t.firstChild?t.insertBefore(e,t.firstChild):t.appendChild(e)},selection:function(t){document.ondragstart=document.onselectstart=t?null:function(){return!1}},clone:function n(t){var e=this,n=t.cloneNode(!0);return n.remove=function(){return e.parentNode.removeChild(e)},t.parentNode.appendChild(n),n},getDimensions:function(t){var e=this;return{l:t.offsetLeft,w:t.offsetWidth,t:t.offsetTop,h:t.offsetHeight,r:function(){return e.l+e.w}(),b:function(){return e.t+e.h}()}}}},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();e["default"]={hsva:function(){function t(e,r,i,o){n(this,t),this.hue=e,this.saturation=r,this.value=i,this.alpha=o}return r(t,[{key:"get",value:function(){var t=100-50*this.saturation;return"hsla("+360*this.hue+", "+100*this.saturation+"%, "+t*this.value+"%, "+this.alpha+")"}}]),t}(),rand:function(t){var e=function(){return parseInt(200*Math.random()+55)};return"rgba("+e()+", "+e()+", "+e()+", "+(t?t:.3)+")"}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),o=r(i),u=n(1),a=r(u);e["default"]={viewPortOffset:function(t){var e=t.getBoundingClientRect();return{l:e.left,t:e.top}},offset:function l(t,e){for(var t=_dom,l={l:0,t:0},e=e||document.body;t&&t.parentNode&&t!=e;){var n={l:t.offsetLeft,t:t.offsetTop},r={l:t.parentNode.scrollLeft,t:t.parentNode.scrollTop},i={l:o["default"].computed(t,"margin-left"),t:o["default"].computed(t,"margin-top")};l.l+=n.l-r.l-i.l,l.t+=n.t-r.t-i.t,t=t.parentNode}return l},domCollision:function(t,e){return this.boxCollision(a["default"].getDimensions(t),a["default"].getDimensions(e))},boxCollision:function(t,e){return t.l<e.l+e.w&&t.t<e.t+e.h&&e.l<t.l+t.w&&e.t<t.t+t.h},viewPortSize:function(t,e,n,r,i,o){var u=new Object,a=t/e,l=r-2*i,s=n/a,f=l*a<o?o/a:l;if(n<t&&s<f)u.w=n,u.h=s,u.m=0;else{var c=f*a,h=c<t?c:t,d=(n-h)/2;u.w=h,u.h=f<e?f:e,u.m=d<i?d:i}return u}}},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]={easing:{linear:function(t){return t},easeOutExpo:function(t){return 1-Math.pow(2,-10*t)},easeInQuad:function(t){return Math.sin(t*(Math.PI/2))},easeOutQuad:function(t){return t*(2-t)},easeInOutQuint:function(t){return t<.5?16*Math.pow(t,5):16*--t*Math.pow(t,4)+1},easeOutElastic:function(t){var e=.8;return Math.pow(2,-10*t)*Math.sin((t-e/4)*(2*Math.PI)/e)+1},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*t*(t-=1.5/2.75)+.75:t<2.5/2.75?7.5625*t*(t-=2.25/2.75)+.9375:7.5625*t*(t-=2.625/2.75)+.984375}},fps:60,jobs:new Array,loop:!1,Job:function r(t,e,i,o){n(this,r),this.onEnd=o;var u=new Date;i(0),this.count=function(){var n=(new Date-u)/1e3/t;return i(n<1?e(n):1),n<1?n:1}},start:function(){var t=this;this.loop=setInterval(function(){for(var e=new Array,n=0;n<t.jobs.length;n++)1==t.jobs[n].count()?t.jobs[n].onEnd&&t.jobs[n].onEnd():e.push(t.jobs[n]);t.jobs=e,0==t.jobs.length&&(clearInterval(t.loop),t.loop=null)}.bind(this),1e3/this.fps)},play:function(t,e,n,r){this.jobs.push(new this.Job(t,this.easing[e],n,r)),this.loop||this.start()},getSinus:function(t,e,n){var r=.001*(new Date).getTime(),i=Math.sin(r*(n||1));return this.root.math.map(i,-1,1,t,e)}}},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();e["default"]={splitQuery:function(t){var e=t.split(".");return{level:e,last:e.length-1}},level:function(t,e,n){for(var r=t,i=0;i<e.last;i++)r=r[e.level[i]];return n?void(r[e.level[e.last]]=n):r[e.level[e.last]]},map:function(t,e){var n=this,r=this.splitQuery(e);return t.map(function(t){return n.level(t,r)}.bind(this))},find:function(t,e){var n=t.slice();for(var r in e){for(var i=[],o=this.map(n,r),u=0;u<o.length;u++)o[u]==e[r]&&i.push(n[u]);n=i.slice()}return n},del:function(t,e){var n=this.find(t,e);return n.forEach(function(e){return t.splice(t.indexOf(e),1)}),n},updateColumn:function(t,e){var n=this;for(var r in e)if(t.length==e[r].length){var i=this.splitQuery(r);t.forEach(function(t,o){return n.level(t,i,e[r][o])}.bind(this))}else console.log("different lenghtes")},filterMap:function(t,e){var n=[];return t.forEach(function(t){var r={};for(var i in e)r[e[i]]=t[i];n.push(r)}),n},buffer:function(){function t(e){n(this,t),this.array=new Array,this.size=e}return r(t,[{key:"get",value:function(t){var e=0,n=this.array.length;n>this.size&&this.array.shift(),this.array.push(t);for(var r=0;r<n;r++)isFinite(this.array[r])&&(e+=parseFloat(this.array[r]));return e/n}}]),t}()}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]={argExist:function(t){return"undefined"!=typeof t},cloneObject:function(t){return JSON.parse(JSON.stringify(t))},readFile:function(t,e){var n=this;if(/\.(jpe?g|png|gif)$/i.test(t.name)){var r=new FileReader;r.onload=function(){e({name:t.name,data:n.result})},r.readAsDataURL(t)}},dropFile:function(t,e){var n=this;t.ondragover=function(){return t.classList.add("drop"),!1},t.ondragleave=function(){t.classList.remove("drop")},t.ondrop=function(){t.classList.remove("drop");for(var r=window.event,i=r.dataTransfer.files,o=[],u=0;u<i.length;u++)n.readFile(i[u],function(t){o.push(t),o.length==i.length&&e(o)});r.preventDefault()}.bind(this)},uploadFile:function(t,e){var n=this;t.onchange=function(){for(var t=window.event,r=t.target.files,i=[],o=0;o<r.length;o++)n.readFile(r[o],function(t){i.push(t),i.length==r.length&&e(i)})}.bind(this)},compressImage:function(t,e,n,r){var i=this,o=[];t.forEach(function(u){var a=document.createElement("img");a.onload=function(){var u=document.createElement("canvas"),a=u.getContext("2d"),l=i.width*e,s=i.height*e;u.width=l,u.height=s,a.drawImage(i,0,0,l,s),o.push(u.toDataURL("image/jpeg",n)),o.length==t.length&&r(o)},a.src=u})},cookie:{get:function(t){var e={};if(t){var n=t.split("; ");n.forEach(function(t){var n=t.split("=");e[n[0]]=n[1]})}return e},set:function(t){var e="";for(var n in t)e+=n+"="+t[n]+"; ";return e},del:function(t,e){t[e]="; expires=Thu, 01 Jan 1970 00:00:01 GMT"}},search:{get:function(t){var e={},n=t.split("?")[1];if(n&&n.length>0){var r=n.split("&");r.forEach(function(t){var n=t.split("=");e[n[0]]=n[1]})}return e},set:function(t){var e="";for(var n in t)e+=n+"="+t[n]+(Object.keys(t).length>1?"&":"");return e}},timeout:function(t,e,n,r,i){var o=t/e,u=setInterval(function(){n(function(t){t&&(r(),clearInterval(u))}),0==o&&(i&&i(),clearInterval(u)),o--},1e3*e)}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=n(1),a=r(u);e["default"]={type:function(){if("undefined"!=typeof window){var t="ontouchstart"in window;return{touch:t,down:t?"ontouchstart":"onmousedown",move:t?"ontouchmove":"onmousemove",up:t?"ontouchend":"onmouseup",out:"onmouseleave"}}}(),drag:function(t,e,n,r){var i=this,o=new Object,u=function(){a["default"].selection(!1),o.event=i.type.touch?window.event.targetTouches[0]:window.event,e(o),t[i.type.down]=null,document.body[i.type.move]=l.bind(i),document.body[i.type.up]=s.bind(i),document.body[i.type.out]=s.bind(i)},l=function(){window.event.preventDefault(),o.event=i.type.touch?window.event.targetTouches[0]:window.event,n(o)},s=function(){a["default"].selection(!0),document.body[i.type.move]=null,document.body[i.type.up]=null,t[i.type.down]=u.bind(i),r(o)};t[this.type.down]=u.bind(this)},resize:function(){function t(e,n,r){i(this,t),this.timeout=null,this.onDragStartFlag=null,this.onDragStart=e,this.onDragUpdate=n,this.onDragRelease=r}return o(t,[{key:"call",value:function(){this.checkStart(),this.onDragUpdate&&this.onDragUpdate(),clearTimeout(this.timeout),this.timeout=setTimeout(this.onEnd.bind(this),200)}},{key:"checkStart",value:function(){this.onDragStartFlag||(this.onDragStartFlag=!0,this.onDragStart&&this.onDragStart())}},{key:"onEnd",value:function(){this.onDragStartFlag&&(this.onDragStartFlag=!1,this.onDragRelease&&this.onDragRelease())}}]),t}()}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=n(3),a=r(u),l=n(2),s=r(l);e["default"]={box:function(){function t(){i(this,t),this.l=0,this.w=0,this.t=0,this.h=0}return o(t,[{key:"r",value:function(){return this.l+this.w}},{key:"b",value:function(){return this.t+this.h}}]),t}(),get:function(t,e){for(var n=new Array,r=t.w*t.h,i=0;i<r;i++){var o=new this.box;if(o.l=i%t.w,o.t=parseInt(i/t.w),!this.collide(e,o))for(var u={x:!0,y:!0};u.x;){for(;u.y;)this.collide(e,this.shift(o,"y",1))||o.b()==t.h?u.y=!1:o.h+=1;this.collide(e,o)||o.r()>t.w?(u.x=!1,n=this.detach(n)):(u.y=!0,n=this.append(n,o),o.h=1,o.w+=1)}}return n=this.filter(n)},append:function(t,e){var n=t.length-1,r=new this.box;return r.l=e.l,r.t=e.t,r.w=e.w,r.h=e.h,t[n]&&t[n].h==e.h&&t[n].l==e.l?t[n]=r:t.push(r),t},detach:function(t){return prev=t.length-2,last=t.length-1,t[prev]&&t[prev].h==t[last].h&&t[prev].r()==t[last].r()&&t.pop(),t},filter:function(t){for(var e=t.length,n=0;n<e;n++)for(var r=0;r<e;r++)n!=r&&t[n]&&t[r]&&t[n].l<=t[r].l&&t[n].r()>=t[r].r()&&t[n].t<=t[r].t&&t[n].b()>=t[r].b()&&(t[r]=void 0);return t.filter(function(t){return t})},shift:function(t,e,n){var r=new this.box;return r.l=t.l,r.t=t.t,r.w=t.w+("x"==e?n:0),r.h=t.h+("y"==e?n:0),r},collide:function(t,e){for(var n=_list.length,r=0;r<n;r++)if(a["default"].boxCollision(_list[r],_box))return!0;return!1},test:function f(t){for(var e=document.body.getElementsByClassName("collider");e.length>0;)document.body.removeChild(e[0]);for(var n=function(){return(Math.random()-.5)*gl.grid.gutter/2},r=0;r<t.length;r++){var f=document.createElement("div");f.className="collider",f.style.backgroundColor=s["default"].rand(),f.style.position="absolute",f.style.left=n()+gl.grid.PTtoPX(t[r].l+1,!0),f.style.top=n()+gl.grid.PTtoPX(t[r].t+1,!0),f.style.width=n()+gl.grid.PTtoPX(t[r].w,!1),f.style.height=n()+gl.grid.PTtoPX(t[r].h,!1),document.body.appendChild(f)}}}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]={map:function(t,e,n,r,i,o){var u=1==o?t<e?e:t>n?n:t:t;return(u-e)/(n-e)*(i-r)+r},binarySearch:function(t,e,n,r){for(var i=length=t;length>=e;)length*=.5,i+=length*(n()?1:-1),r(i)},linearInterpolation:function(t,e){for(var n=[],r=0,i=0;i<e.length-1&&t>=e[i][0];i++)r=i;for(var o=e[r],u=e[r+1],i=1;i<o.length;i++)n.push(this.map(t,o[0],u[0],o[i],u[i]));return n},getValueBySize:function(t,e){for(var n=null,r=0;r<e.length;r++)t>=e[r][0]&&(n=e[r][1]);return n},rubberEffect:function(t,e,n,r,i){var o=1.3,u="undefined"!=typeof n,a="undefined"!=typeof e;if(u||a)var l=t<n,r=(l?1:-1)*r,s=l?n:e,f=(s-t)/r,c=s-r*(1-Math.pow(1+f,-o));var h=u&&t<n,d=a&&t>e;return i&&i(h?"max":d?"min":null),h||d?c:t}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),u=r(o);e["default"]={ellipsis:function(t,e,n,r){if(t.innerHTML=e,!r())for(var i=e.split(" "),o=i.length,u=function(e){t.innerHTML=i.slice(0,e).join(" ")+n},a=0;a<o;a++)if(u(a),!r()){u(a-1);break}},lineCount:function(t){return t.offsetHeight/parseInt(u["default"].computed(t,"line-height"))},capitalize:function(t){return t.charAt(0).toUpperCase()+t.slice(1)},hash:function a(t){var a=0;for(i=0;i<t.length;i++)a+=t.charCodeAt(i);return a}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),o=r(i);e["default"]=function(t){var e=function(t){var e="translate("+t.value.translation.x+"px, "+t.value.translation.y+"px)",n="scale("+t.value.scale.x+",   "+t.value.scale.y+")";t.style[o["default"].vendorPrefix+"Transform"]=e+" "+n},n=function(t){t.style[o["default"].vendorPrefix+"TransformOrigin"]=t.value.origin.x+" "+t.value.origin.y};t.value={origin:{x:0,y:0},translation:{x:0,y:0},scale:{x:1,y:1},rotation:{z:0}},t.originXY=function(t,e){return this.value.origin.x=t,this.value.origin.y=e,n(this),this},t.originX=function(t){return this.value.origin.x=t,n(this),this},t.originY=function(t){return this.value.origin.y=t,n(this),this},t.translateXY=function(t,n){return this.value.translation.x=t,this.value.translation.y=n,e(this),this},t.translateX=function(t){return this.value.translation.x=t,e(this),this},t.translateY=function(t){return this.value.translation.y=t,e(this),this},t.scale=function(t){return this.value.scale.x=this.value.scale.y=t,e(this),this},t.scaleXY=function(t,n){return this.value.scale.x=t,this.value.scale.y=n,e(this),this},t.scaleX=function(t){return this.value.scale.x=t,e(this),this},t.scaleY=function(t){return this.value.scale.y=t,e(this),this},t.rotate=function(t){return this.value.rotation.z=t,e(this),this}}},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],r=arguments.length<=1||void 0===arguments[1]?0:arguments[1],i=arguments.length<=2||void 0===arguments[2]?0:arguments[2];n(this,t),this.x=e,this.y=r,this.z=i,console.log("vector not cutted")}return r(t,[{key:"copy",value:function(){return new t(this.x,this.y,this.z)}},{key:"add",value:function(e,n){return n?(this.x+=e.x,this.y+=e.y,this.z+=e.z,this):new t(this.x+e.x,this.y+e.y,this.z+e.z)}},{key:"sub",value:function(e,n){return n?(this.x-=e.x,this.y-=e.y,this.z-=e.z,this):new t(this.x-e.x,this.y-e.y,this.z-e.z)}},{key:"div",value:function(e,n){return n?(this.x/=e.x,this.y/=e.y,this.z/=e.z,this):new t(this.x/e.x,this.y/e.y,this.z/e.z)}},{key:"len",value:function(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2)+Math.pow(this.z,2))}},{key:"scale",value:function(e,n){return n?(this.x*=e,this.y*=e,this.z*=e,this):new t(this.x*e,this.y*e,this.z*e)}},{key:"norm",value:function(e){if(e){var n=1/this.len();return this.x*=n,this.y*=n,this.z*=n,this}var n=1/this.len();return new t(this.x*n,this.y*n,this.z*n)}},{key:"resize",value:function(e){var n=this.getNorm();return new t(n.x*e,n.y*e,n.z*e)}},{key:"getTween",value:function(e,n){return new t(n*(e.x-this.x)+this.x,n*(e.y-this.y)+this.y,n*(e.z-this.z)+this.z)}},{key:"getAngle2D",value:function(){return 180*Math.atan2(this.x,this.y)/Math.PI}}]),t}();e["default"]=i},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(4);Object.defineProperty(e,"animation",{enumerable:!0,get:function(){return r(i)["default"]}});var o=n(8);Object.defineProperty(e,"freespace",{enumerable:!0,get:function(){return r(o)["default"]}});var u=n(3);Object.defineProperty(e,"geometry",{enumerable:!0,get:function(){return r(u)["default"]}});var a=n(11);Object.defineProperty(e,"transform",{enumerable:!0,get:function(){return r(a)["default"]}});var l=n(5);Object.defineProperty(e,"arr",{enumerable:!0,get:function(){return r(l)["default"]}});var s=n(12);Object.defineProperty(e,"vec",{enumerable:!0,get:function(){return r(s)["default"]}});var f=n(9);Object.defineProperty(e,"math",{enumerable:!0,get:function(){return r(f)["default"]}});var c=n(2);Object.defineProperty(e,"color",{enumerable:!0,get:function(){return r(c)["default"]}});var h=n(1);Object.defineProperty(e,"dom",{enumerable:!0,get:function(){return r(h)["default"]}});var d=n(7);Object.defineProperty(e,"event",{enumerable:!0,get:function(){return r(d)["default"]}});var v=n(6);Object.defineProperty(e,"etc",{enumerable:!0,get:function(){return r(v)["default"]}});var p=n(0);Object.defineProperty(e,"style",{enumerable:!0,get:function(){return r(p)["default"]}});var y=n(10);Object.defineProperty(e,"text",{enumerable:!0,get:function(){return r(y)["default"]}})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,